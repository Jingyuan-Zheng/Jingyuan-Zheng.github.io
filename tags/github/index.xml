<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>GitHub on Jingyuan</title>
        <link>https://Jingyuan-Zheng.github.io/tags/github/</link>
        <description>Recent content in GitHub on Jingyuan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Jingyuan Zheng</copyright>
        <lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://Jingyuan-Zheng.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>我的第一篇博客：从零到一，用 Hugo &#43; Stack 主题搭建个人网站</title>
        <link>https://Jingyuan-Zheng.github.io/p/my-first-blog-setup-guide/</link>
        <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://Jingyuan-Zheng.github.io/p/my-first-blog-setup-guide/</guid>
        <description>&lt;p&gt;你好，世界！欢迎来到我的小站。&lt;/p&gt;
&lt;p&gt;正如标题所说，这是我的第一篇博客。作为一个喜欢记录和分享的人，我一直梦想着拥有一个属于自己的、可以自由书写的空间。在探索了各种方案后，我最终选择了 &lt;strong&gt;Hugo + GitHub Pages&lt;/strong&gt; 这套组合，因为它足够&lt;strong&gt;快速、免费、强大&lt;/strong&gt;，而且折腾起来非常有成就感。&lt;/p&gt;
&lt;p&gt;这篇文章，就是为了记录我从一个想法到网站上线的全过程，并特别点出一些教程里可能没详细说明、但我亲身遇到的“坑”。&lt;/p&gt;
&lt;p&gt;搭建过程我主要参考了以下优秀教程，强烈推荐大家先看一遍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字教程： &lt;a class=&#34;link&#34; href=&#34;https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo + Stack 主题打造自定义博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;视频教程：&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1bovfeaEtQ/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【雷】Hugo + Github免费搭建博客，并实现自动化部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;整体思路&#34;&gt;整体思路
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在本地电脑上安装 Hugo。&lt;/li&gt;
&lt;li&gt;创建网站、配置主题、撰写文章。&lt;/li&gt;
&lt;li&gt;将网站源码推送到 GitHub，触发自动化部署。&lt;/li&gt;
&lt;li&gt;最终，通过 &lt;code&gt;username.github.io&lt;/code&gt; 访问你的博客。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第一步环境准备-macos&#34;&gt;第一步：环境准备 (macOS)
&lt;/h2&gt;&lt;p&gt;首先，我们需要一些基础工具。在 macOS 上，推荐使用 Homebrew 这个包管理器来安装，非常方便。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Homebrew&lt;/strong&gt; (如果已经安装，请跳过)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/bin/bash -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Hugo 和 Git&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装完成后，可以通过 &lt;code&gt;hugo version&lt;/code&gt; 和 &lt;code&gt;git --version&lt;/code&gt; 来检查。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;核心搭建步骤跟随教程--注意差异&#34;&gt;核心搭建步骤：跟随教程 &amp;amp; 注意差异
&lt;/h2&gt;&lt;p&gt;从创建 Hugo 网站、安装 Stack 主题，到配置 &lt;code&gt;hugo.toml&lt;/code&gt; 文件、设置 GitHub Actions 自动化部署，上面链接的教程已经讲得非常详细清晰了，我就不再赘述。&lt;/p&gt;
&lt;p&gt;在这里，我只想补充一点 &lt;strong&gt;macOS 用户&lt;/strong&gt; 需要注意的小差异：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;macOS 用户请注意：&lt;/strong&gt;
在视频教程中，你可能会看到讲师使用的是 &lt;code&gt;hugo.exe&lt;/code&gt; 命令。这是因为他可能是在 Windows 上直接下载的二进制文件。
在 macOS 上，通过 Homebrew 安装后，&lt;strong&gt;直接使用 &lt;code&gt;hugo&lt;/code&gt; 命令即可&lt;/strong&gt;，例如 &lt;code&gt;hugo server -D&lt;/code&gt;。不需要 &lt;code&gt;.exe&lt;/code&gt; 后缀。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;关键一步首次-git-push-与-github-令牌token&#34;&gt;关键一步：首次 &lt;code&gt;git push&lt;/code&gt; 与 GitHub 令牌（Token）
&lt;/h2&gt;&lt;p&gt;当你本地的所有工作都完成后，最后一步是 &lt;code&gt;git push&lt;/code&gt;，将你的网站源码推送到 GitHub 仓库。&lt;strong&gt;这是新手最容易卡住的地方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在 GitHub 不再支持使用账户密码直接进行 &lt;code&gt;git&lt;/code&gt; 操作，我们必须使用 &lt;strong&gt;个人访问令牌（Personal Access Token, PAT）&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;1-为什么需要令牌&#34;&gt;1. 为什么需要令牌？
&lt;/h4&gt;&lt;p&gt;简单来说，令牌是比密码更安全的一种认证方式。&lt;/p&gt;
&lt;h4 id=&#34;2-第一次-push-的正确姿势&#34;&gt;2. 第一次 Push 的正确姿势
&lt;/h4&gt;&lt;p&gt;当你第一次执行 &lt;code&gt;git push&lt;/code&gt; 时，系统会弹出一个窗口或在命令行提示你输入用户名和密码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt; 输入你的 GitHub 用户名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Password:&lt;/strong&gt; &lt;strong&gt;千万不要输入你的 GitHub 登录密码！&lt;/strong&gt; 在这里应该粘贴你提前生成好的&lt;strong&gt;个人访问令牌&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如何生成令牌？&lt;/strong&gt;
前往 GitHub -&amp;gt; 点击右上角头像 -&amp;gt; Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens -&amp;gt; Tokens (classic) -&amp;gt; Generate new token。
&lt;strong&gt;权限 (Scopes)&lt;/strong&gt; 至少要勾选 &lt;code&gt;repo&lt;/code&gt;。
生成后，&lt;strong&gt;立刻复制并保存好这个令牌&lt;/strong&gt;，因为这个页面关掉后你将再也看不到它了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;3-救命我的令牌过期了错了该如何更新&#34;&gt;3. 救命！我的令牌过期了/错了，该如何更新？
&lt;/h4&gt;&lt;p&gt;这是一个非常常见的问题。如果你之前设置过错误的令牌，或者令牌过期了，&lt;code&gt;git push&lt;/code&gt; 会一直失败，提示认证错误。这是因为 macOS 的“钥匙串”已经帮你记住了那个旧的、无效的令牌。&lt;/p&gt;
&lt;p&gt;我们需要手动删除它，让 Git 重新问你要新的。&lt;/p&gt;
&lt;p&gt;在最新版的 macOS 中，操作非常简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;打开“系统设置”&lt;/strong&gt; (System Settings)。&lt;/li&gt;
&lt;li&gt;在左侧菜单找到并进入 &lt;strong&gt;“密码”&lt;/strong&gt; (Passwords) 区域 (需要 Touch ID 或密码解锁)。&lt;/li&gt;
&lt;li&gt;在密码列表上方的搜索框中，输入 &lt;code&gt;github.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;找到相关的条目，点击右侧的“信息”图标 (i)，然后选择 &lt;strong&gt;“删除密码”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除后，回到你的终端，再次执行 &lt;code&gt;git push&lt;/code&gt;。此时，系统就会重新提示你输入用户名和密码了，这时再粘贴你的&lt;strong&gt;新令牌&lt;/strong&gt;，问题就解决了！&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;搭建博客的过程，就是跟随教程、解决问题的过程。希望我补充的这两点关于 macOS 的命令差异和 GitHub 令牌的经验，能帮你绕过新手常见的“坑”。&lt;/p&gt;
&lt;p&gt;现在，轮到你来书写自己的故事了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
